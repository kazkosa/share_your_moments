= render "devise/shared/nav"
.post-main
  .post-main__new_inner
    .post-main__new_inner__contents
      .field.newpost_image
        / Show an image
        .image_box_for_edit
          .image_box_inner
            - if @post.image.present?
              = image_tag @post.image.url ,id:"current_image_for_edit", class: "filter-#{@post.image_option}", data:{imgid:"0"}
            - elsif @post.post_images.present?
              - @post.post_images.each_with_index do |post_image,i|
                = image_tag post_image.image.url ,id:"current_image_for_edit", class: "filter-#{@post.image_option}", data:{imgid:"#{i}",imgtotal:"#{@post.post_images.count}"}
              - if @post.post_images.count >= 2
                .right-arrow
                  >
                .left-arrow
                  <
                %ul.ball-boxes
                  - @post.post_images.each do |image|
                    %li.ball-box
        .input_post_wrapper
          / auther info
          .user_box
            .user_box_wrapper
              - if @post.user.avatar.attached?
                .avatar_box
                  .avatar_box_inner
                    = image_tag @post.user.avatar ,class:"avatar_image" 
              - else
                .avatar_box
                  .avatar_box_inner__non-avatar
                    =fa_icon "user-circle",class:"fa-2x non-avatar"
              = link_to user_path(@post.user), class:"user_name_box" do
                = @post.user.name
              .user_follow_box
                = render partial:"relationships/follow_button", locals: { user: @post.user}
          / article and comment info
          .article_and_comment_box
            .article_box
              .article_box__title
                = @post.title
              .article_box__content= @post.content
              .article_box__timestamp
                = @post.created_at.to_s
              -if @post.location
                .article_box__location
                  Photo location:
                  %span.swithmap#map_confirm
                    = @post.location
                = hidden_field_tag "location", @post.location, id:"address"
                .article_box__location_map
                  .map#map

            .comment-list
              - @comments.each do |comment|
                .user_box
                  .user_box_wrapper
                    - if comment.user.avatar.attached?
                      .avatar_box
                        .avatar_box_inner
                          = image_tag comment.user.avatar ,class:"avatar_image"
                    - else
                      .avatar_box
                        .avatar_box_inner__non-avatar
                          =fa_icon "user-circle",class:"fa-2x non-avatar"
                    .comment_box_main
                      .comment_box_main__name
                        = comment.user.name
                      .comment_box_main__text<
                        =comment.text
                      .comment_box_main__timestamp
                        =comment.created_at.to_s 
                        
          /evaluate info
          .evaluate_box
            .reader_info.like_btn{data: { like: @like  } }
              .off-to-on{style:"display:none;"}
                .like_link
                  = link_to post_likes_path(@post),  {method:"post", remote: true} do
                    = fa_icon "heart-o",   class:"fa-lg icon-like"          
              .on-to-off{style:"display:none;"}
                .like_link
                  = link_to post_like_path(@post), {method:"delete", remote: true} do
                    = fa_icon "heart", class:"fa-lg icon-like"

            .reader_info.comment-state{data: { written: @comments.find_by(user_id:current_user.id ) } }
              .commnet-notyet{style:"display:none;"}
                = fa_icon "comment-o",class:"fa-lg icon-comm"
              .commnet-already{style:"display:none;"}
                = fa_icon "comment",class:"fa-lg icon-comm"

            .reader_info.favorite-state{data:{ favorite: @favorite} }
              .favorite-notyet{style:"display:none;"}
                .favo_link
                  = link_to post_favorites_path(@post),  {method:"post", remote: true} do
                    = fa_icon "star-o",class:"fa-lg icon-favo"
              .favorite-already{style:"display:none;"}
                .favo_link
                  = link_to post_favorite_path(@post),  {method:"delete", remote: true} do
                    = fa_icon "star",class:"fa-lg icon-favo"

          /comment form
          .comment_form
            = form_for [@post,@comment] , html: {class: "new__message"} do |f|
              .field.entercomment
                = f.text_area :text,  placeholder: "Message", required: true, class: "message__content"
              .actions.commentbtn
                = f.submit "Send", class:"btn btn-secondary", id:"comment_post"
      
      /Display the edit/delete select option only if the article author equal to current_user
      - if user_signed_in? && current_user.id == @post.user_id
        .select_step
          =link_to "Edit", edit_post_path(@post), class:"btn_map submit btn btn-outline-primary"
          %button.btn.btn-outline-primary{data: { toggle:"modal", target:"#exampleModal" } } Delete

/ state translate to confirmation only if delete btn on
.modal.fade#exampleModal{tabindex:"-1",role:"dialog", aria: { labelledby:"exampleModalLabel", hidden:"true"}}
  .modal-dialog{role:"document"}
    .modal-content
      .modal-header
        %h5.modal-title#exampleModalLabel Confirmation
        %button.close{data:{dismiss:"moddal"},aria:{label:"Close"}}
          %span{aria:{hidden:"true"}} &times;
      .modal-body Are you sure you want to delete this thread?
      .modal-footer
        %button.btn.btn-secondary{data:{dismiss:"modal"}} Close
        =link_to "Delete", "/posts/#{@post.id}",method: :delete, class:"btn_map submit btn btn-outline-primary"